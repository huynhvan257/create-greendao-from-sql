package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, Void> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Categorycol = new Property(1, String.class, "categorycol", false, "CATEGORYCOL");
        public final static Property Categorycol1 = new Property(2, String.class, "categorycol1", false, "CATEGORYCOL1");
        public final static Property Categorycol2 = new Property(3, java.util.Date.class, "categorycol2", false, "CATEGORYCOL2");
        public final static Property Categorycol3 = new Property(4, Byte.class, "categorycol3", false, "CATEGORYCOL3");
        public final static Property Categorycol4 = new Property(5, String.class, "categorycol4", false, "CATEGORYCOL4");
        public final static Property Categorycol5 = new Property(6, String.class, "categorycol5", false, "CATEGORYCOL5");
        public final static Property Categorycol6 = new Property(7, Byte.class, "categorycol6", false, "CATEGORYCOL6");
        public final static Property Categorycol7 = new Property(8, Byte.class, "categorycol7", false, "CATEGORYCOL7");
        public final static Property Categorycol8 = new Property(9, Byte.class, "categorycol8", false, "CATEGORYCOL8");
        public final static Property Categorycol9 = new Property(10, Byte.class, "categorycol9", false, "CATEGORYCOL9");
        public final static Property Categorycol10 = new Property(11, String.class, "categorycol10", false, "CATEGORYCOL10");
        public final static Property Categorycol11 = new Property(12, java.util.Date.class, "categorycol11", false, "CATEGORYCOL11");
        public final static Property Categorycol12 = new Property(13, String.class, "categorycol12", false, "CATEGORYCOL12");
        public final static Property Categorycol13 = new Property(14, String.class, "categorycol13", false, "CATEGORYCOL13");
        public final static Property Categorycol14 = new Property(15, String.class, "categorycol14", false, "CATEGORYCOL14");
        public final static Property Categorycol15 = new Property(16, String.class, "categorycol15", false, "CATEGORYCOL15");
        public final static Property Categorycol16 = new Property(17, String.class, "categorycol16", false, "CATEGORYCOL16");
        public final static Property Categorycol17 = new Property(18, String.class, "categorycol17", false, "CATEGORYCOL17");
        public final static Property Categorycol18 = new Property(19, String.class, "categorycol18", false, "CATEGORYCOL18");
        public final static Property Categorycol19 = new Property(20, String.class, "categorycol19", false, "CATEGORYCOL19");
        public final static Property Categorycol20 = new Property(21, String.class, "categorycol20", false, "CATEGORYCOL20");
        public final static Property Categorycol21 = new Property(22, String.class, "categorycol21", false, "CATEGORYCOL21");
        public final static Property Categorycol22 = new Property(23, String.class, "categorycol22", false, "CATEGORYCOL22");
    };


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"CATEGORYCOL\" TEXT," + // 1: categorycol
                "\"CATEGORYCOL1\" TEXT," + // 2: categorycol1
                "\"CATEGORYCOL2\" INTEGER," + // 3: categorycol2
                "\"CATEGORYCOL3\" INTEGER," + // 4: categorycol3
                "\"CATEGORYCOL4\" TEXT," + // 5: categorycol4
                "\"CATEGORYCOL5\" TEXT," + // 6: categorycol5
                "\"CATEGORYCOL6\" INTEGER," + // 7: categorycol6
                "\"CATEGORYCOL7\" INTEGER," + // 8: categorycol7
                "\"CATEGORYCOL8\" INTEGER," + // 9: categorycol8
                "\"CATEGORYCOL9\" INTEGER," + // 10: categorycol9
                "\"CATEGORYCOL10\" TEXT," + // 11: categorycol10
                "\"CATEGORYCOL11\" INTEGER," + // 12: categorycol11
                "\"CATEGORYCOL12\" TEXT," + // 13: categorycol12
                "\"CATEGORYCOL13\" TEXT," + // 14: categorycol13
                "\"CATEGORYCOL14\" TEXT," + // 15: categorycol14
                "\"CATEGORYCOL15\" TEXT," + // 16: categorycol15
                "\"CATEGORYCOL16\" TEXT," + // 17: categorycol16
                "\"CATEGORYCOL17\" TEXT," + // 18: categorycol17
                "\"CATEGORYCOL18\" TEXT," + // 19: categorycol18
                "\"CATEGORYCOL19\" TEXT," + // 20: categorycol19
                "\"CATEGORYCOL20\" TEXT," + // 21: categorycol20
                "\"CATEGORYCOL21\" TEXT," + // 22: categorycol21
                "\"CATEGORYCOL22\" TEXT);"); // 23: categorycol22
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String categorycol = entity.getCategorycol();
        if (categorycol != null) {
            stmt.bindString(2, categorycol);
        }
 
        String categorycol1 = entity.getCategorycol1();
        if (categorycol1 != null) {
            stmt.bindString(3, categorycol1);
        }
 
        java.util.Date categorycol2 = entity.getCategorycol2();
        if (categorycol2 != null) {
            stmt.bindLong(4, categorycol2.getTime());
        }
 
        Byte categorycol3 = entity.getCategorycol3();
        if (categorycol3 != null) {
            stmt.bindLong(5, categorycol3);
        }
 
        String categorycol4 = entity.getCategorycol4();
        if (categorycol4 != null) {
            stmt.bindString(6, categorycol4);
        }
 
        String categorycol5 = entity.getCategorycol5();
        if (categorycol5 != null) {
            stmt.bindString(7, categorycol5);
        }
 
        Byte categorycol6 = entity.getCategorycol6();
        if (categorycol6 != null) {
            stmt.bindLong(8, categorycol6);
        }
 
        Byte categorycol7 = entity.getCategorycol7();
        if (categorycol7 != null) {
            stmt.bindLong(9, categorycol7);
        }
 
        Byte categorycol8 = entity.getCategorycol8();
        if (categorycol8 != null) {
            stmt.bindLong(10, categorycol8);
        }
 
        Byte categorycol9 = entity.getCategorycol9();
        if (categorycol9 != null) {
            stmt.bindLong(11, categorycol9);
        }
 
        String categorycol10 = entity.getCategorycol10();
        if (categorycol10 != null) {
            stmt.bindString(12, categorycol10);
        }
 
        java.util.Date categorycol11 = entity.getCategorycol11();
        if (categorycol11 != null) {
            stmt.bindLong(13, categorycol11.getTime());
        }
 
        String categorycol12 = entity.getCategorycol12();
        if (categorycol12 != null) {
            stmt.bindString(14, categorycol12);
        }
 
        String categorycol13 = entity.getCategorycol13();
        if (categorycol13 != null) {
            stmt.bindString(15, categorycol13);
        }
 
        String categorycol14 = entity.getCategorycol14();
        if (categorycol14 != null) {
            stmt.bindString(16, categorycol14);
        }
 
        String categorycol15 = entity.getCategorycol15();
        if (categorycol15 != null) {
            stmt.bindString(17, categorycol15);
        }
 
        String categorycol16 = entity.getCategorycol16();
        if (categorycol16 != null) {
            stmt.bindString(18, categorycol16);
        }
 
        String categorycol17 = entity.getCategorycol17();
        if (categorycol17 != null) {
            stmt.bindString(19, categorycol17);
        }
 
        String categorycol18 = entity.getCategorycol18();
        if (categorycol18 != null) {
            stmt.bindString(20, categorycol18);
        }
 
        String categorycol19 = entity.getCategorycol19();
        if (categorycol19 != null) {
            stmt.bindString(21, categorycol19);
        }
 
        String categorycol20 = entity.getCategorycol20();
        if (categorycol20 != null) {
            stmt.bindString(22, categorycol20);
        }
 
        String categorycol21 = entity.getCategorycol21();
        if (categorycol21 != null) {
            stmt.bindString(23, categorycol21);
        }
 
        String categorycol22 = entity.getCategorycol22();
        if (categorycol22 != null) {
            stmt.bindString(24, categorycol22);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // categorycol
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categorycol1
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // categorycol2
            cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4), // categorycol3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // categorycol4
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // categorycol5
            cursor.isNull(offset + 7) ? null : (byte) cursor.getShort(offset + 7), // categorycol6
            cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8), // categorycol7
            cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9), // categorycol8
            cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10), // categorycol9
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // categorycol10
            cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)), // categorycol11
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // categorycol12
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // categorycol13
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // categorycol14
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // categorycol15
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // categorycol16
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // categorycol17
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // categorycol18
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // categorycol19
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // categorycol20
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // categorycol21
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23) // categorycol22
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCategorycol(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategorycol1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategorycol2(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setCategorycol3(cursor.isNull(offset + 4) ? null : (byte) cursor.getShort(offset + 4));
        entity.setCategorycol4(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategorycol5(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCategorycol6(cursor.isNull(offset + 7) ? null : (byte) cursor.getShort(offset + 7));
        entity.setCategorycol7(cursor.isNull(offset + 8) ? null : (byte) cursor.getShort(offset + 8));
        entity.setCategorycol8(cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9));
        entity.setCategorycol9(cursor.isNull(offset + 10) ? null : (byte) cursor.getShort(offset + 10));
        entity.setCategorycol10(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCategorycol11(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setCategorycol12(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCategorycol13(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCategorycol14(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCategorycol15(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCategorycol16(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCategorycol17(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCategorycol18(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCategorycol19(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCategorycol20(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCategorycol21(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCategorycol22(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Category entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Category entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
